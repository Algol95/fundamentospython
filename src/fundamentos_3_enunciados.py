import random
import string

# üß™ Fundamentos Python III ‚Äì Funciones

# ------------------------------
# ‚ú® Ejercicio 1: Saludo b√°sico
# Objetivo: Aprender a definir y llamar funciones
# Crea una funci√≥n llamada saludar() que imprima: "¬°Hola, bienvenido/a!"
# Luego llama a la funci√≥n una vez para comprobar que funciona.

print("------------------------------")
print("‚ú® Ejercicio 1: Saludo b√°sico:")
print("------------------------------")


def saludar():
    print("¬°Hola, bienvenido/a!")


saludar()

# ------------------------------
# ‚ú® Ejercicio 2: Saludo personalizado
# Objetivo: Trabajar con par√°metros
# Crea una funci√≥n llamada saludar_persona(nombre)
# que imprima: "Hola, [nombre]!"
# Llama a la funci√≥n dos veces con diferentes nombres.

print("-------------------------------------")
print("‚ú® Ejercicio 2: Saludo personalizado:")
print("-------------------------------------")


def saludar_persona(name):
    print(f"Hola, {name}!")


saludar_persona("Paco")
# ------------------------------
# ‚ú® Ejercicio 3: Suma f√°cil
# Objetivo: Usar par√°metros y return
# Crea una funci√≥n llamada sumar(a, b) que devuelva la suma de dos n√∫meros.
# Guarda el resultado en una variable y mu√©stralo con print().

print("---------------------------")
print("‚ú® Ejercicio 3: Suma f√°cil:")
print("---------------------------")


def sumar(a, b):
    return a + b


result = sumar(2, 3)
print(result)

# ------------------------------
# ‚ú® Ejercicio 4: ¬øPar o impar?
# Objetivo: Usar l√≥gica dentro de una funci√≥n
# Escribe una funci√≥n es_par(numero) que devuelva True si el n√∫mero es par
# y False si es impar.
# Pru√©bala con varios n√∫meros y muestra el resultado.

print("-----------------------------")
print("‚ú® Ejercicio 4: ¬øPar o impar?")
print("-----------------------------")


def es_par(n):
    if n % 2:
        return False
    else:
        return True


nums = [0, 1, 2, 3, 4, 99, 100, -7, -8]

for n in nums:
    print(es_par(n))
# ------------------------------
# ‚ú® Ejercicio 5: Mensaje con formato
# Objetivo: Devolver una cadena con formato
# Crea una funci√≥n llamada mensaje(nombre, edad) que devuelva una frase como:
# "Me llamo Marta y tengo 30 a√±os."
# Usa return y luego muestra el mensaje con print().

print("-----------------------------------")
print("‚ú® Ejercicio 5: Mensaje con formato")
print("-----------------------------------")


def message(name, age):
    return f"Me llamo {name} y tengo {age} a√±os"


print(message("Ana", 238))
# ------------------------------
# ‚ú® Ejercicio 6: Calculadora simple
# Objetivo: Practicar varias funciones juntas
# Crea 4 funciones: sumar(a, b), restar(a, b), multiplicar(a, b), dividir(a, b)
# Llama a cada una con un par de n√∫meros y muestra los resultados.
# Bonus: en dividir(), si el segundo n√∫mero es 0,
# devuelve "No se puede dividir por cero"

print("----------------------------------")
print("‚ú® Ejercicio 6: Calculadora simple")
print("----------------------------------")


def sumar(n1, n2):
    return n1 + n2


def restar(n1, n2):
    return n1 - n2


def mult(n1, n2):
    return n1 * n2


def div(n1, n2):
    if n2 == 0:
        return "No se puede dividir por 0"
    else:
        return n1 / n2


try:
    x = float(input("Introd√∫ce el primer n√∫mero: "))
    y = float(input("Introd√∫ce el segundo n√∫mero: "))
    print("--------------")
    print("1. Sumar\n2. Restar\n3. Multiplicar\n4. Dividir")
    print("--------------")
    menu = int(input("Ind√≠que √≠ndice de la operaci√≥n deseada: "))

    result = {
        1: sumar(x, y),
        2: restar(x, y),
        3: mult(x, y),
        4: div(x, y)
    }.get(menu, "‚ùå Opci√≥n no contemplada")

    if 1 <= menu <= 4:
        print(f"Resultado: {result}")
    else:
        print(result)
except Exception as e:
    print(f"\033[91mPar√°metro no v√°lido: {e}\033[0m")

# ------------------------------
# ‚ú® Ejercicio 7: Edad en el futuro
# Objetivo: Usar return con operaciones
# Escribe una funci√≥n llamada edad_futura(edad_actual, a√±os)
# que calcule la edad que tendr√°s despu√©s de X a√±os.

print("---------------------------------")
print("‚ú® Ejercicio 7: Edad en el futuro")
print("---------------------------------")


def edad_futura(edad_actual, a√±os):
    return edad_actual + a√±os


print(edad_futura(238, 1000))

# ------------------------------
# ‚ú® Ejercicio 8: Media de 3 n√∫meros
# Objetivo: Trabajar con n√∫meros y return
# Crea una funci√≥n llamada calcular_media(a, b, c)
# que devuelva la media de tres n√∫meros.
# Prueba la funci√≥n y muestra el resultado con print().

print("----------------------------------")
print("‚ú® Ejercicio 8: Media de 3 n√∫meros")
print("----------------------------------")


def media(*nums):
    return sum(nums) / len(nums)


print(media(1, 2, 3))

# ------------------------------
# ‚ú® Ejercicio 9: Mostrar men√∫ (sin l√≥gica)
# Objetivo: Separar la presentaci√≥n de la l√≥gica
# Escribe una funci√≥n llamada mostrar_menu() que imprima un peque√±o men√∫ como:
# 1. Ver perfil
# 2. Editar perfil
# 3. Cerrar sesi√≥n

print("-----------------------------------------")
print("‚ú® Ejercicio 9: Mostrar men√∫ (sin l√≥gica)")
print("-----------------------------------------")


def mostrar_menu():
    print("1. Ver perfil")
    print("2. Editar perfil")
    print("3. Cerrar sesi√≥n")


mostrar_menu()

# ------------------------------
# üåü Reto Final: Generador de contrase√±as

# Crea una funci√≥n llamada generar_contrase√±a(longitud)
# que devuelva una contrase√±a aleatoria con la longitud especificada.

# La contrase√±a debe contener una mezcla de:
# - letras min√∫sculas (a-z)
# - letras may√∫sculas (A-Z)
# - n√∫meros (0-9)
# - s√≠mbolos como !, @, #, $, %, &, *

# Ejemplo de uso:
# contrase√±a = generar_contrase√±a(12)
# print(contrase√±a)  # -> A2c$e9#Tq&7L

# Bonus:
# - Usa la librer√≠a random
# - Controla que la longitud m√≠nima sea 8 caracteres
# - A√±ade un mensaje de advertencia si se pide menos de 8

print("---------------------------------------")
print("‚ú® Reto Final: Generador de contrase√±as")
print("---------------------------------------")


def randomNum():
    return str(random.randint(0, 9))


def randomWordLower():
    return random.choice(string.ascii_lowercase)


def randomWordUpper():
    return randomWordLower().upper()


def randomSymbol():
    symbol = ["!", "@", "#", "$", "%", "&", "*"]
    return random.choice(symbol)


def passwordGenerator():
    choices = {
        1: randomNum,
        2: randomWordLower,
        3: randomWordUpper,
        4: randomSymbol
    }
    password = ""
    try:
        longi = 0
        while longi < 8:
            longi = int(input("Introduce la longitud de la contrase√±a: "))
            if longi < 8:
                print("\033[91mLa longitud debe ser al menos de 8\033[0m")
        for i in range(longi):
            password += choices[random.choice(list(choices.keys()))]()
        print(f"Tu contrase√±a es: {password}")
    except Exception as e:
        print(f"\033[91mFormato no v√°lido: {e}\033[0m")


passwordGenerator()
